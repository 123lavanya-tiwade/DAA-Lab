#include <stdio.h>
#include <limits.h>

#define MAX 100
#define INF 9999

int graph[MAX][MAX];
int dist[MAX];
int visited[MAX];
int parent[MAX];

void printPath(int j) {
    if (parent[j] == -1) {
        printf("%d", j);
        return;
    }
    printPath(parent[j]);
    printf("<-%d", j);
}

void dijkstra(int n, int src) {
    for (int i = 1; i <= n; i++) {
        dist[i] = INF;
        visited[i] = 0;
        parent[i] = -1;
    }

    dist[src] = 0;

    for (int count = 1; count <= n - 1; count++) {
        int u = -1;
        int minDist = INF;

        for (int i = 1; i <= n; i++) {
            if (!visited[i] && dist[i] < minDist) {
                minDist = dist[i];
                u = i;
            }
        }

        if (u == -1) break; //

        visited[u] = 1;

        for (int v = 1; v <= n; v++) {
            if (!visited[v] && graph[u][v] != INF && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
                parent[v] = u;
            }
        }
    }

    printf("Node\tDistance\tPath\n");
    for (int i = 1; i <= n; i++) {
        if (i == src) continue;
        if (dist[i] == INF) {
            printf(" %d\tINF\t\tNO PATH\n", i);
        } else {
            printf(" %d\t%d\t\t", i, dist[i]);
            printPath(i);
            printf("\n");
        }
    }
}

int main() {
    int n, e;
    int src;

    printf("Enter the number of vertices : ");
    scanf("%d", &n);

    printf("Enter the number of edges : ");
    scanf("%d", &e);

    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            graph[i][j] = INF;
        }
    }

    for (int i = 0; i < e; i++) {
        int u, v, w;
        printf("Enter source : ");
        scanf("%d", &u);
        printf("Enter destination : ");
        scanf("%d", &v);
        printf("Enter weight : ");
        scanf("%d", &w);
        graph[u][v] = w;
    }

    printf("Enter the source :");
    scanf("%d", &src);

    dijkstra(n, src);

    return 0;
}
