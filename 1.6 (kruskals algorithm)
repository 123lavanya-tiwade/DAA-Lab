#include <stdio.h>

#define MAX 100
#define INF 9999

int parent[MAX];

int find(int i) {
    while (parent[i] != i)
        i = parent[i];
    return i;
}

void unionSet(int i, int j) {
    int a = find(i);
    int b = find(j);
    parent[a] = b;
}

void kruskalsAlgorithm(int n, int graph[MAX][MAX]) {
    int minCost = 0; 
    int edgeCount = 0;

    for (int i = 0; i < n; i++) {
        parent[i] = i;
    }

    printf("Edges in the Minimum Spanning Tree:\n");

    while (edgeCount < n - 1) {
        int min = INF, u = -1, v = -1;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (find(i) != find(j) && graph[i][j] < min) {
                    min = graph[i][j];
                    u = i;
                    v = j;
                }
            }
        }

        if (u != -1 && v != -1) {
            unionSet(u, v);
            printf("%d - %d  :  %d\n", u, v, min);
            minCost += min;
            edgeCount++;
        }
    }

    printf("Total Minimum Cost: %d\n", minCost);
}

int main() {
    int n;
    int graph[MAX][MAX];

    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    kruskalsAlgorithm(n, graph);

    return 0;
}
